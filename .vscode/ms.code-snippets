{
  // Place your frontend-project-structure workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "functional component with Styles, Props(indx)": {
    "prefix": "icsp",
    "body": [
      "import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';",
      "",
      "type TStyleProps = {};",
      "",
      "const useStyles = makeStyles<Theme, TStyleProps>((theme) =>",
      "  createStyles({",
      "    root: {},",
      "    fn: (props) => ({}),",
      "  }),",
      ");",
      "",
      "type T${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}Props = {};",
      "",
      "export default function ${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}(props: T${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}Props):React.ReactElement {",
      "  const classes = useStyles();",
      "  ",
      "  return (",
      "    <></>",
      "  );",
      "}",
      "",
      ""
    ],
    "description": ""
  },

  "functional component with Styles, Props": {
    "prefix": "csp",
    "body": [
      "import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';",
      "",
      "type TStyleProps = {};",
      "",
      "const useStyles = makeStyles<Theme, TStyleProps>((theme) =>",
      "  createStyles({",
      "    root: {},",
      "    fn: (props) => ({}),",
      "  }),",
      ");",
      "",
      "type T${TM_FILENAME_BASE}Props = {};",
      "",
      "export default function ${TM_FILENAME_BASE}(props: T${TM_FILENAME_BASE}Props):React.ReactElement {",
      "  const classes = useStyles();",
      "  ",
      "  return (",
      "    <></>",
      "  );",
      "}",
      "",
      ""
    ],
    "description": ""
  },
  "create react hooks": {
    "prefix": "crh",
    "body": [
      "import { useCallback } from 'react';",
      "import { useDispatch } from 'react-redux';",
      "import { useRootState } from '../';",
      "import { actions } from './';",
      "",
      "export const useHooks = () => {",
      "  const dispatch = useDispatch();",
      "  const onActions = useCallback(() => dispatch(actions.something()), [dispatch]);",
      "  const ${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}State = useRootState((state) => state.${TM_DIRECTORY/.*\\\\/(.*)$/$1/g});",
      "  return {${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}State, onActions};",
      "}"
    ],
    "description": ""
  },
  "create redux slice": {
    "prefix": "crs",
    "body": [
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "import { T${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}} from './types';",
      "",
      "const name = '${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}';",
      "",
      "const initialState:T${TM_DIRECTORY/.*\\\\/(.*)$/$1/g} = {};",
      "",
      "const reducers = {};",
      "",
      "const ${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}Slice = createSlice({name, initialState, reducers});",
      "",
      "export default ${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}Slice.reducer;",
      "export const actions = ${TM_DIRECTORY/.*\\\\/(.*)$/$1/g}Slice.actions;"
    ],
    "description": ""
  }
}
