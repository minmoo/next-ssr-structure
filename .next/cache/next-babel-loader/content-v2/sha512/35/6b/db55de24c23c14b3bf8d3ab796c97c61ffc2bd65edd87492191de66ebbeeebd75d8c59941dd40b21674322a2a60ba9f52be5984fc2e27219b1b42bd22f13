{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport test from \"./test\";\nimport { useSelector as useReduxSelector } from \"react-redux\";\nconst rootReducer = combineReducers({\n  test\n});\n\nconst reducer = (state, action) => {\n  //서버에서 생성한 리덕스 스토어를 클라이언트에서 사용할 수 있게 해준다.\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return nextState;\n  }\n\n  return rootReducer(state, action);\n}; //스토어 타입\n\n\n//미들웨어 적용을 위한 스토어 enhancer\nconst initStore = () => {\n  const store = configureStore({\n    reducer,\n    devTools: true,\n    middleware: []\n  });\n  return store;\n};\n\nexport const wrapper = createWrapper(initStore); //1 타입 지원하는 커스텀 useSelector\n\nexport const useSelector = useReduxSelector; //2\n// declare module \"react-redux\" {\n//   interface DefaultRootState extends RootState {}\n// }","map":{"version":3,"sources":["/project/next-app/store/index.ts"],"names":["combineReducers","HYDRATE","createWrapper","configureStore","test","useSelector","useReduxSelector","rootReducer","reducer","state","action","type","nextState","payload","initStore","store","devTools","middleware","wrapper"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAEEC,WAAW,IAAIC,gBAFjB,QAGO,aAHP;AAKA,MAAMC,WAAW,GAAGP,eAAe,CAAC;AAClCI,EAAAA;AADkC,CAAD,CAAnC;;AAIA,MAAMI,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgBV,OAApB,EAA6B;AAC3B,UAAMW,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAKA,WAAOD,SAAP;AACD;;AAED,SAAOL,WAAW,CAACE,KAAD,EAAQC,MAAR,CAAlB;AACD,CAZD,C,CAcA;;;AAGA;AACA,MAAMI,SAAS,GAAG,MAAM;AACtB,QAAMC,KAAK,GAAGZ,cAAc,CAAC;AAC3BK,IAAAA,OAD2B;AAE3BQ,IAAAA,QAAQ,EAAE,IAFiB;AAG3BC,IAAAA,UAAU,EAAE;AAHe,GAAD,CAA5B;AAMA,SAAOF,KAAP;AACD,CARD;;AAUA,OAAO,MAAMG,OAAO,GAAGhB,aAAa,CAACY,SAAD,CAA7B,C,CAEP;;AACA,OAAO,MAAMT,WAA4C,GAAGC,gBAArD,C,CACP;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from \"redux\";\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport test from \"./test\";\nimport {\n  TypedUseSelectorHook,\n  useSelector as useReduxSelector,\n} from \"react-redux\";\n\nconst rootReducer = combineReducers({\n  test,\n});\n\nconst reducer = (state, action) => {\n  //서버에서 생성한 리덕스 스토어를 클라이언트에서 사용할 수 있게 해준다.\n  if (action.type === HYDRATE) {\n    const nextState = {\n      ...state, //use previous state\n      ...action.payload, // apply delta from hydration\n    };\n\n    return nextState;\n  }\n\n  return rootReducer(state, action);\n};\n\n//스토어 타입\nexport type RootState = ReturnType<typeof rootReducer>;\n\n//미들웨어 적용을 위한 스토어 enhancer\nconst initStore = () => {\n  const store = configureStore({\n    reducer,\n    devTools: true,\n    middleware: [],\n  });\n\n  return store;\n};\n\nexport const wrapper = createWrapper(initStore);\n\n//1 타입 지원하는 커스텀 useSelector\nexport const useSelector: TypedUseSelectorHook<RootState> = useReduxSelector;\n//2\n// declare module \"react-redux\" {\n//   interface DefaultRootState extends RootState {}\n// }\n"]},"metadata":{},"sourceType":"module"}